#!/usr/bin/env python3
"""
Generic check for monitoring a certificate's expiration date

MIT License

Copyright (c) 2016 Lee Clemens

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""

from __future__ import print_function

import argparse
import datetime
import re
import subprocess
import sys
import traceback

STATUS_OK = 0
STATUS_WARNING = 1
STATUS_CRITICAL = 2
STATUS_UNKNOWN = 3

PREFIXES = {
    STATUS_OK: 'OK',
    STATUS_WARNING: 'WARNING',
    STATUS_CRITICAL: 'CRITICAL',
    STATUS_UNKNOWN: 'UNKNOWN'
}


def run(args):
    """Main run function to execute this check
    """
    # Enhance: Use shlex and python pipes
    openssl_cmd = (
        'echo'
        ' | openssl s_client -crlf'
        ' {}'
        ' -servername {}'
        ' -connect {}:{} 2>/dev/null'
        ' | openssl x509 -noout -dates'.format(
            '-starttls {}'.format(args.starttls) if args.starttls else '',
            args.server,
            args.server,
            args.port))
    with subprocess.Popen(openssl_cmd, shell=True,
                          stdout=subprocess.PIPE, stderr=subprocess.PIPE) as proc:
        stdout, stderr = proc.communicate()
        if proc.returncode == 0:
            regex = re.compile(r"^notBefore=(?P<before>(.*))\n"
                               r"notAfter=(?P<after>(.*))\n", re.MULTILINE)
            match = regex.match(stdout
                                if isinstance(stdout, str)
                                else stdout.decode('utf-8'))
            if match:
                cert_date_format = "%b %d %H:%M:%S %Y %Z"
                before = datetime.datetime.strptime(match.group('before'),
                                                    cert_date_format)
                after = datetime.datetime.strptime(match.group('after'),
                                                   cert_date_format)
            else:
                print(stdout)
                print('Unexpected number of certificates')
                sys.exit(STATUS_CRITICAL)
            assert before is not None
            assert after is not None

            cur_time = datetime.datetime.utcnow()
            process_cert_time(args, before, after, cur_time)
        else:
            print('Failed to execute %s %s %s' %
                  (openssl_cmd, stdout, stderr))
            sys.exit(STATUS_CRITICAL)


def process_cert_time(args, before, after, cur_time):
    """Process the certificate times and determine result
    Call exit_with_perf_data
    """
    if before <= cur_time:
        if after >= cur_time:
            if after - cur_time <= datetime.timedelta(days=args.warning):
                if after - cur_time <= datetime.timedelta(days=args.critical):
                    exit_with_perf_data(after, cur_time, STATUS_CRITICAL)
                else:
                    exit_with_perf_data(after, cur_time, STATUS_WARNING)
            else:
                exit_with_perf_data(after, cur_time, STATUS_OK)
        else:
            print('Certificate in no longer valid')
            exit_with_perf_data(after, cur_time, STATUS_CRITICAL)
    else:
        print('Certificate is not yet valid')
        exit_with_perf_data(after, cur_time, STATUS_CRITICAL, before=before)


def exit_with_perf_data(after, cur_time, exit_code, before=None):
    """Print result with perf data and exit
    """
    time_remaining = after - cur_time
    if hasattr(time_remaining, 'total_seconds'):
        time_remaining_sec = time_remaining.total_seconds()
    else:
        time_remaining_sec = (time_remaining.microseconds
                              + (time_remaining.seconds + time_remaining.days * 24 * 3600)
                              * 10 ** 6) / 10 ** 6
    perf_data_days = time_remaining_sec / 60 / 60 / 24
    print('%s - Expires: %s%s | days_remaining=%s' % (
        PREFIXES[exit_code],
        after,
        ' Not valid until: %s' % before
        if before else '',
        perf_data_days))
    sys.exit(exit_code)


def parse_args():
    """Parse command line arguments
    """
    parser = argparse.ArgumentParser(
        'This plugin checks the Elasticsearch snapshots for either all'
        ' or a specific repository. It will test the age'
        ' of any successful snapshot, using the newest in each repository.')
    parser.add_argument('-s', '--server', type=str,
                        required=True,
                        dest='server',
                        help='server to test')
    parser.add_argument('-p', '--port', type=int,
                        required=True,
                        dest='port',
                        default=443,
                        help='port to connect to')
    parser.add_argument('-w', '--warning', type=int,
                        required=True,
                        dest='warning',
                        help='warning days as an integer, must be > critical days')
    parser.add_argument('-c', '--critical', type=int,
                        required=True,
                        dest='critical',
                        help='critical days as an integer')
    parser.add_argument('-t', '--starttls', type=str,
                        dest='starttls',
                        required=False,
                        default='',
                        help='STARTTLS Protocol (e.g. smtp)')
    args = parser.parse_args()
    if args.warning < args.critical:
        print('Warning must be greater than critical')
        sys.exit(STATUS_CRITICAL)
    return args


if __name__ == '__main__':
    try:
        run(parse_args())
    # pylint: disable=broad-except
    except Exception as ex:
        print('%s: Unhandled exception %s' % (sys.argv[0], type(ex)))
        print(ex)
        traceback.print_exc()
        sys.exit(STATUS_CRITICAL)
